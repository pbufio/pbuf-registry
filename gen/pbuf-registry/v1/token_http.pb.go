// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             (unknown)
// source: pbuf-registry/v1/token.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTokenServiceRegisterToken = "/pbufregistry.v1.TokenService/RegisterToken"
const OperationTokenServiceRevokeToken = "/pbufregistry.v1.TokenService/RevokeToken"

type TokenServiceHTTPServer interface {
	// RegisterToken Register authorization token
	RegisterToken(context.Context, *RegisterTokenRequest) (*RegisterTokenResponse, error)
	// RevokeToken Revoke authorization token
	RevokeToken(context.Context, *RevokeTokenRequest) (*RevokeTokenResponse, error)
}

func RegisterTokenServiceHTTPServer(s *http.Server, srv TokenServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/tokens/register", _TokenService_RegisterToken0_HTTP_Handler(srv))
	r.POST("/v1/tokens/revoke", _TokenService_RevokeToken0_HTTP_Handler(srv))
}

func _TokenService_RegisterToken0_HTTP_Handler(srv TokenServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenServiceRegisterToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterToken(ctx, req.(*RegisterTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _TokenService_RevokeToken0_HTTP_Handler(srv TokenServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RevokeTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenServiceRevokeToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeToken(ctx, req.(*RevokeTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeTokenResponse)
		return ctx.Result(200, reply)
	}
}

type TokenServiceHTTPClient interface {
	RegisterToken(ctx context.Context, req *RegisterTokenRequest, opts ...http.CallOption) (rsp *RegisterTokenResponse, err error)
	RevokeToken(ctx context.Context, req *RevokeTokenRequest, opts ...http.CallOption) (rsp *RevokeTokenResponse, err error)
}

type TokenServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTokenServiceHTTPClient(client *http.Client) TokenServiceHTTPClient {
	return &TokenServiceHTTPClientImpl{client}
}

func (c *TokenServiceHTTPClientImpl) RegisterToken(ctx context.Context, in *RegisterTokenRequest, opts ...http.CallOption) (*RegisterTokenResponse, error) {
	var out RegisterTokenResponse
	pattern := "/v1/tokens/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenServiceRegisterToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenServiceHTTPClientImpl) RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...http.CallOption) (*RevokeTokenResponse, error) {
	var out RevokeTokenResponse
	pattern := "/v1/tokens/revoke"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenServiceRevokeToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
