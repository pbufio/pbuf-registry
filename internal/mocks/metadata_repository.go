// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/pbufio/pbuf-registry/internal/model"

	v1 "github.com/pbufio/pbuf-registry/gen/pbuf-registry/v1"
)

// MetadataRepository is an autogenerated mock type for the MetadataRepository type
type MetadataRepository struct {
	mock.Mock
}

// GetProtoFilesForTagId provides a mock function with given fields: ctx, tagId
func (_m *MetadataRepository) GetProtoFilesForTagId(ctx context.Context, tagId string) ([]*v1.ProtoFile, error) {
	ret := _m.Called(ctx, tagId)

	if len(ret) == 0 {
		panic("no return value specified for GetProtoFilesForTagId")
	}

	var r0 []*v1.ProtoFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*v1.ProtoFile, error)); ok {
		return rf(ctx, tagId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*v1.ProtoFile); ok {
		r0 = rf(ctx, tagId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.ProtoFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tagId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagMetaByTagId provides a mock function with given fields: ctx, tagId
func (_m *MetadataRepository) GetTagMetaByTagId(ctx context.Context, tagId string) (*model.TagMeta, error) {
	ret := _m.Called(ctx, tagId)

	if len(ret) == 0 {
		panic("no return value specified for GetTagMetaByTagId")
	}

	var r0 *model.TagMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TagMeta, error)); ok {
		return rf(ctx, tagId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TagMeta); ok {
		r0 = rf(ctx, tagId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TagMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tagId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnprocessedTagIds provides a mock function with given fields: ctx
func (_m *MetadataRepository) GetUnprocessedTagIds(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUnprocessedTagIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveParsedProtoFiles provides a mock function with given fields: ctx, tagId, files
func (_m *MetadataRepository) SaveParsedProtoFiles(ctx context.Context, tagId string, files []*model.ParsedProtoFile) error {
	ret := _m.Called(ctx, tagId, files)

	if len(ret) == 0 {
		panic("no return value specified for SaveParsedProtoFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*model.ParsedProtoFile) error); ok {
		r0 = rf(ctx, tagId, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMetadataRepository creates a new instance of MetadataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataRepository {
	mock := &MetadataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
